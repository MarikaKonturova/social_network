{"version":3,"sources":["components/hoc/withAuthRedirect.tsx","components/Content/ProfileInfo/ProfileInfo.module.css","components/Content/MyPosts/MyPosts.module.css","components/Content/MyPosts/Post/Post.module.css","asets/images/userWithoutAvatar.jpg","components/Content/ProfileInfo/ProfileStatusWithHooks.tsx","components/Content/ProfileInfo/ProfileDataForm.tsx","components/Content/ProfileInfo/ProfileInfo.tsx","components/Content/MyPosts/Post/Post.tsx","components/Content/MyPosts/MyPosts.tsx","components/Content/MyPosts/MyPostsContainer.tsx","components/Content/Profile.tsx","components/Content/ProfileContainer.tsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","data","withAuthRedirect","Component","connect","props","resProps","to","module","exports","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onChange","e","currentTarget","value","autoFocus","onBlur","updateUserStatus","onDoubleClick","ProfileDataForm","error","useSelector","profilePage","errorDataForm","onSubmit","render","handleSubmit","type","className","s","name","defaultValue","profile","fullName","input","placeholder","component","Input","lookingForAJob","lookingForAJobDescription","aboutMe","Object","keys","contacts","map","key","contact","ProfileData","isOwner","onClick","contactTitle","contactValue","Contact","ProfileInfo","Preloader","descriptionBlock","src","photos","large","userDefaultAvatar","userPhoto","target","files","savePhoto","formData","saveProfile","then","Post","classes","item","message","likes","MyPosts","React","memo","postsElements","postsData","el","postBlock","addPost","newPostText","required","requiredField","posts","maxLength10","maxLengthCreator","NewPostForm","Textarea","validate","composeValidators","dispatch","addPostActionCreator","Profile","MyPostsContainer","ProfileContainer","userId","this","match","params","authorizedUserId","getUserProfile","getUserStatus","refreshProfile","prevProps","prevState","snapshot","compose","id","withRouter"],"mappings":"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","file":"static/js/3.e988bbef.chunk.js","sourcesContent":["import {Redirect} from \"react-router-dom\";\r\nimport React, {Component, ComponentType} from \"react\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\ntype mapStateToPropsForRedirectType ={\r\n    isAuth: boolean\r\n}\r\nconst mapStateToPropsForRedirect = (state: AppStateType): mapStateToPropsForRedirectType => {\r\n    return {\r\n        isAuth: state.auth.data.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>){\r\n\r\n    const RedirectComponent = (props: mapStateToPropsForRedirectType) => {\r\n        let {isAuth, ...resProps } = {...props}\r\n        if (!props.isAuth) return <Redirect to={\"/login\"}/>\r\n        return <Component {...resProps as T}/>\r\n    }\r\n\r\n    return connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__8k8f8\",\"userPhoto\":\"ProfileInfo_userPhoto__2LImh\",\"contact\":\"ProfileInfo_contact__30pdJ\",\"error\":\"ProfileInfo_error__x9ZCy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postBlock\":\"MyPosts_postBlock__QGgfc\",\"posts\":\"MyPosts_posts__3YrLI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3EH5P\"};","export default __webpack_public_path__ + \"static/media/userWithoutAvatar.6b27f4a4.jpg\";","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\n\r\ntype ProfileStatusType = {\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatusWithHooks = (props: ProfileStatusType)=> {\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(()=>{\r\n        setStatus(props.status)\r\n    },[props.status])\r\n\r\n    const actiateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateUserStatus(status);\r\n\r\n    }\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <b>\r\n            {!editMode\r\n                ?\r\n                <div>\r\n                    <span onDoubleClick={() => actiateEditMode()}>{props.status || 'no status'}</span>\r\n                </div>\r\n                :\r\n                <div>\r\n                    <input onChange={onStatusChange} autoFocus={true} value={status}\r\n                           onBlur={() => deactivateEditMode()}/>\r\n                </div>}\r\n        </b>\r\n    )\r\n\r\n}","import React from \"react\";\r\nimport {Field, FieldInputProps, Form} from \"react-final-form\";\r\nimport {Input} from \"../../Common/FormsControls/FormControls\";\r\nimport {ContactType} from \"./ProfileInfo\";\r\nimport s from \"./ProfileInfo.module.css\"\r\nimport {ProfileType} from \"../../redux/profile-reducer\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\nexport const ProfileDataForm = (props: ProfileDataFormType) => {\r\n    const error = useSelector<AppStateType, null | string>(state => state.profilePage.errorDataForm)\r\n\r\n    return (\r\n        <Form onSubmit={props.onSubmit}\r\n              render={({handleSubmit}) => (\r\n                  <form onSubmit={handleSubmit}>\r\n                      <button type=\"submit\">save</button>\r\n                      {error && <div className={s.error}>{error}</div>}\r\n\r\n                      <Field name=\"fullName\" defaultValue={props.profile.fullName}>\r\n                          {({input}) => (\r\n                              <div>\r\n                                  <label><b>Full name </b></label>\r\n                                  <input {...input} type=\"text\" placeholder={props.profile.fullName}/></div>\r\n                          )}\r\n                      </Field>\r\n\r\n                      <div>\r\n                          <b>Looking for a job</b>: <Field name=\"lookingForAJob\" component={Input} type={'checkbox'}\r\n                                                           defaultValue={props.profile.lookingForAJob}\r\n                                                           placeholder={props.profile.lookingForAJob ? 'yes' : 'no'}/>\r\n                      </div>\r\n                      <div>\r\n                          <b>My professional skills</b>: <Field name=\"lookingForAJobDescription\" component={Input}\r\n                                                                defaultValue={props.profile.lookingForAJobDescription}\r\n                                                                placeholder={props.profile.lookingForAJobDescription}/>\r\n                      </div>\r\n                      <div>\r\n                          <b>About me</b>: <Field name=\"aboutMe\" component={Input}\r\n                                                  defaultValue={props.profile.aboutMe}\r\n                                                  placeholder={props.profile.aboutMe}/>\r\n                      </div>\r\n                      <div>\r\n                          <b>Contacts</b> :\r\n\r\n                          {Object.keys(props.profile.contacts).map((key) => {\r\n                              return (\r\n                                  <div className={s.contact} key={key}>\r\n                                      <b>{key}</b> : <Field name={`contacts.${key}`} component={Input}\r\n                                                            defaultValue={props.profile.contacts[key as keyof ContactType]}\r\n                                                            placeholder={props.profile.contacts[key as keyof ContactType]}/>\r\n\r\n                                  </div>\r\n                              )\r\n                          })}\r\n                      </div>\r\n                  </form>\r\n              )}\r\n        />\r\n    )\r\n}\r\n\r\n//types\r\n\r\ntype ProfileDataFormType = {\r\n    profile: ProfileType\r\n    onSubmit: (formData: any) => void\r\n}\r\n\r\n\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {Preloader} from \"../../Common/Preloader/Preloader\";\r\nimport userDefaultAvatar from \"../../../asets/images/userWithoutAvatar.jpg\";\r\nimport {ProfileType} from \"../../redux/profile-reducer\";\r\nimport {ProfileStatusWithHooks} from \"./ProfileStatusWithHooks\";\r\nimport s from \"./ProfileInfo.module.css\"\r\nimport {ProfileDataForm} from \"./ProfileDataForm\";\r\n\r\n\r\nconst ProfileInfo = (props: ProfileInfoType) => {\r\n    let [editMode, setEditMode] = useState(false)\r\n    const onChangeUserAvatar = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (!e.target.files) return\r\n        else {\r\n            props.savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n    const onSubmit = (formData: ProfileType) => {\r\n        props.saveProfile(formData).then(() => {\r\n                setEditMode(false)\r\n            }\r\n        )\r\n\r\n    }\r\n\r\n    return (\r\n        <div className={s.descriptionBlock}>\r\n            <img src={props.profile.photos.large || userDefaultAvatar} className={s.userPhoto}/>\r\n            {props.isOwner && <input type={'file'} onChange={onChangeUserAvatar}/>}\r\n            <ProfileStatusWithHooks status={props.status} updateUserStatus={props.updateUserStatus}/>\r\n            {editMode\r\n                ? <ProfileDataForm profile={props.profile} onSubmit={onSubmit}/>\r\n                : <ProfileData profile={props.profile} isOwner={props.isOwner} setEditMode={setEditMode}/>\r\n\r\n            }\r\n        </div>\r\n\r\n    )\r\n}\r\nconst ProfileData = ({profile, setEditMode, isOwner}: ProfileDataType) => {\r\n\r\n    return <>\r\n        <button onClick={() => {\r\n            if (setEditMode) setEditMode(true)\r\n        }}>Edit Profile\r\n        </button>\r\n        <div>\r\n            <b>Full name</b>: {profile.fullName}\r\n        </div>\r\n        <div>\r\n            <b>About me</b>: {profile.aboutMe}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job</b>: {profile.lookingForAJob ? 'yes' : 'no'}\r\n        </div>\r\n        {profile.lookingForAJob\r\n        && <div>\r\n            <b>My professional skills</b>: {profile.lookingForAJobDescription}\r\n        </div>\r\n        }\r\n\r\n        <div>\r\n            <b>Contacts</b> : {Object.keys(profile.contacts).map((key) => {\r\n            return (\r\n                <Contact\r\n                    contactTitle={key}\r\n                    contactValue={profile.contacts[key as keyof ContactType]}\r\n                />\r\n            )\r\n        })}\r\n            {/*THE SECOND SOLUTION*/}\r\n            {/*{\r\n                    Object.entries(props.profile.contacts).map((arr) => {\r\n                        return (\r\n                            <Contact\r\n                                contactTitle={arr[0]}\r\n                                contactValue={arr[1]}\r\n                            />\r\n                        )\r\n                    })}*/}\r\n        </div>\r\n    </>\r\n}\r\n\r\nexport const Contact = ({contactTitle, contactValue}: ContactPropsType) => {\r\n    return <div className={s.contact}><b>{contactTitle}</b> : {contactValue}</div>\r\n}\r\n\r\n//types\r\n\r\ntype ProfileInfoType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (image: string | Blob) => void\r\n    saveProfile: (formData: ProfileType) => Promise<void>\r\n}\r\nexport type ContactType = {\r\n    github: string\r\n    vk: string\r\n    facebook: string\r\n    instagram: string\r\n    twitter: string\r\n    website: string\r\n    youtube: string\r\n    mainLink: string\r\n}\r\nexport type ContactPropsType = {\r\n    contactTitle: string,\r\n    contactValue: string\r\n}\r\ntype ProfileDataType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    setEditMode: (EditMode: boolean) => void\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport classes from './Post.module.css';\r\n\r\nconst Post = (props: any) => {\r\n    return (\r\n\r\n        <div className={classes.item}>\r\n            <img\r\n                src=\"https://png.pngtree.com/element_our/20190530/ourlarge/pngtree-520-couple-avatar-boy-avatar-little-dinosaur-cartoon-cute-image_1263411.jpg\"/>\r\n            {props.message}\r\n            <div>\r\n                <span>like </span> {props.likes}\r\n            </div>\r\n             </div>\r\n    )\r\n}\r\nexport default Post;","import React from 'react';\r\nimport {PostType} from '../../redux/profile-reducer';\r\nimport classes from './MyPosts.module.css';\r\nimport Post from \"./Post/Post\";\r\nimport {Field, Form} from \"react-final-form\";\r\nimport {composeValidators, maxLengthCreator, requiredField} from \"../../../utils/validators/Validator\";\r\nimport {Textarea} from \"../../Common/FormsControls/FormControls\";\r\n\r\n\r\nconst MyPosts = React.memo((props: MyPostsPropsType)=> {\r\n\r\n    let addPost = ({newPostText, ...restProps}: AddNewPostType) => {\r\n        props.addPost(newPostText);\r\n    }\r\n\r\n    let postsElements = props.postsData.map(el => <Post message={el.message} likes={el.likes}/>);\r\n    return (\r\n        <div className={classes.postBlock}>\r\n            <h3>My posts</h3>\r\n            <div>\r\n                <NewPostForm addPost={addPost} required={requiredField}/>\r\n                <div className={classes.posts}>\r\n                    {postsElements}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\nconst maxLength10 =  maxLengthCreator(10)\r\nconst NewPostForm = ({addPost,required, ...restProps}: NewPostFormType) => {\r\n    return (\r\n        <Form onSubmit={addPost}\r\n              render={({handleSubmit}) => (\r\n                  <form onSubmit={handleSubmit}>\r\n                      <div>\r\n                          <Field name=\"newPostText\"\r\n                                 component={Textarea}\r\n                                 placeholder=\"Enter your post\"\r\n                                 validate={composeValidators(required,maxLength10)}\r\n                          />\r\n                      </div>\r\n                      <button type=\"submit\">Submit</button>\r\n                  </form>\r\n              )}\r\n        />\r\n    )\r\n}\r\ntype NewPostFormType={\r\n    addPost:(values: AddNewPostType)=> void\r\n    required:(value: any)=> void\r\n}\r\ntype AddNewPostType = {\r\n    newPostText: string\r\n}\r\n\r\ntype MyPostsPropsType = {\r\n    postsData: Array<PostType>,\r\n    addPost:(newPost: string)=> void\r\n}\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport {addPostActionCreator} from \"../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        postsData: state.profilePage.postsData,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {\r\n             addPost : (newPostText: string) => {\r\n            dispatch(addPostActionCreator(newPostText));\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MyPosts)","import React from 'react';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType} from \"../redux/profile-reducer\";\r\n\r\ntype ProfileProps = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (image: string | Blob) => void\r\n    saveProfile: (formData: ProfileType) => Promise<void>\r\n}\r\nconst Profile = (props: ProfileProps) => {\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <img\r\n                    src='https://www.tripsavvy.com/thmb/FwmQ-JvBEBDDlVb-j_zdEo0iVsA=/2048x1152/smart/filters:no_upscale()/beach-5b59c9b7c9e77c004b3e0ff0.jpg'/>\r\n            </div>\r\n            <ProfileInfo savePhoto={props.savePhoto}\r\n                         isOwner={props.isOwner}\r\n                         profile={props.profile}\r\n                         status={props.status}\r\n                         updateUserStatus={props.updateUserStatus}\r\n                         saveProfile={props.saveProfile}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\nexport default Profile;","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    getUserProfile,\r\n    getUserStatus,\r\n    ProfileType,\r\n    updateUserStatus,\r\n    savePhoto,\r\n    saveProfile\r\n} from \"../redux/profile-reducer\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport {Redirect, RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\ntype PropsType = RouteComponentProps<PathParamsType> & OwnPropsType\r\ntype MapStatePropsType = {\r\n    profile: ProfileType\r\n    status: string,\r\n    authorizedUserId: number | null\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchPropsType = {\r\n    getUserProfile: (userId: number) => void\r\n    getUserStatus: (userId: number) => void\r\n    updateUserStatus: (status: string) => void\r\n    savePhoto: (image: string | Blob) => void\r\n    saveProfile: (formData: any) => Promise<void>\r\n}\r\ntype OwnPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n    refreshProfile() {\r\n        let userId = +(this.props.match.params.userId);\r\n        if (!userId) {\r\n            if (this.props.authorizedUserId) {\r\n                userId = this.props.authorizedUserId\r\n            } else {\r\n                return <Redirect to={'/login'}/>\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getUserStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                     isOwner={!this.props.match.params.userId}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateUserStatus={this.props.updateUserStatus}/>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.data.id,\r\n    isAuth: state.auth.data.isAuth\r\n\r\n});\r\nexport default compose<React.ComponentType>(connect(mapStateToProps, {\r\n        getUserProfile,\r\n        getUserStatus,\r\n        updateUserStatus,\r\n        savePhoto,\r\n        saveProfile\r\n    }),\r\n    withRouter,\r\n    withAuthRedirect)\r\n(ProfileContainer)\r\n"],"sourceRoot":""}