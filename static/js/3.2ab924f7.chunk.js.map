{"version":3,"sources":["components/hoc/withAuthRedirect.tsx","components/Content/ProfileInfo/ProfileIInfo.module.css","components/Content/MyPosts/MyPosts.module.css","components/Content/MyPosts/Post/Post.module.css","components/Content/ProfileInfo/ProfileStatusWithHooks.tsx","components/Content/ProfileInfo/ProfileInfo.tsx","components/Content/MyPosts/Post/Post.tsx","components/Content/MyPosts/MyPosts.tsx","components/Content/MyPosts/MyPostsContainer.tsx","components/Content/Profile.tsx","components/Content/ProfileContainer.tsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","data","withAuthRedirect","Component","connect","props","resProps","to","module","exports","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onChange","e","currentTarget","value","autoFocus","onBlur","updateUserStatus","onDoubleClick","ProfileInfo","profile","src","className","classes","descriptionBlock","photos","large","lookingForAJob","lookingForAJobDescription","Preloader","Post","item","message","likes","MyPosts","React","memo","postsElements","postsData","map","el","postBlock","addPost","newPostText","required","requiredField","posts","maxLength10","maxLengthCreator","NewPostForm","onSubmit","render","handleSubmit","name","component","Textarea","placeholder","validate","composeValidators","type","profilePage","dispatch","addPostActionCreator","Profile","MyPostsContainer","ProfileContainer","userId","this","match","params","authorizedUserId","getUserProfile","getUserStatus","compose","id","withRouter"],"mappings":"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","file":"static/js/3.2ab924f7.chunk.js","sourcesContent":["import {Redirect} from \"react-router-dom\";\r\nimport React, {Component, ComponentType} from \"react\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\ntype mapStateToPropsForRedirectType ={\r\n    isAuth: boolean\r\n}\r\nconst mapStateToPropsForRedirect = (state: AppStateType): mapStateToPropsForRedirectType => {\r\n    return {\r\n        isAuth: state.auth.data.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>){\r\n\r\n    const RedirectComponent = (props: mapStateToPropsForRedirectType) => {\r\n        let {isAuth, ...resProps } = {...props}\r\n        if (!props.isAuth) return <Redirect to={\"/login\"}/>\r\n        return <Component {...resProps as T}/>\r\n    }\r\n\r\n    return connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileIInfo_descriptionBlock__1vyEE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postBlock\":\"MyPosts_postBlock__QGgfc\",\"posts\":\"MyPosts_posts__3YrLI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3EH5P\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\n\r\ntype ProfileStatusType = {\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatusWithHooks = (props: ProfileStatusType)=> {\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(()=>{\r\n        setStatus(props.status)\r\n    },[props.status])\r\n\r\n    const actiateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateUserStatus(status);\r\n\r\n    }\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {!editMode\r\n                ?\r\n                <div>\r\n                    <span onDoubleClick={() => actiateEditMode()}>{props.status || 'no status'}</span>\r\n                </div>\r\n                :\r\n                <div>\r\n                    <input onChange={onStatusChange} autoFocus={true} value={status}\r\n                           onBlur={() => deactivateEditMode()}/>\r\n                </div>}\r\n        </>\r\n    )\r\n\r\n}","import React from 'react';\r\nimport classes from './ProfileIInfo.module.css';\r\nimport {Preloader} from \"../../Common/Preloader/Preloader\";\r\nimport {ProfileStatus} from \"./ProfileStatus\";\r\nimport {ProfileType} from \"../../redux/profile-reducer\";\r\nimport {ProfileStatusWithHooks} from \"./ProfileStatusWithHooks\";\r\n\r\ntype ProfileInfoType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileInfo = (props: ProfileInfoType) => {\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n        <div>\r\n            <div>\r\n                <img\r\n                    src='https://www.tripsavvy.com/thmb/FwmQ-JvBEBDDlVb-j_zdEo0iVsA=/2048x1152/smart/filters:no_upscale()/beach-5b59c9b7c9e77c004b3e0ff0.jpg'/>\r\n            </div>\r\n            <div className={classes.descriptionBlock}>\r\n                <img src={props.profile.photos.large}/>\r\n                <div>\r\n                    {props.profile.lookingForAJob ? props.profile.lookingForAJobDescription : 'I\\'m looking for a job'}\r\n                </div>\r\n                <ProfileStatusWithHooks status={props.status} updateUserStatus={props.updateUserStatus}/>\r\n\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\nexport default ProfileInfo;","import React from 'react';\r\nimport classes from './Post.module.css';\r\n\r\nconst Post = (props: any) => {\r\n    return (\r\n\r\n        <div className={classes.item}>\r\n            <img\r\n                src=\"https://png.pngtree.com/element_our/20190530/ourlarge/pngtree-520-couple-avatar-boy-avatar-little-dinosaur-cartoon-cute-image_1263411.jpg\"/>\r\n            {props.message}\r\n            <div>\r\n                <span>like </span> {props.likes}\r\n            </div>\r\n             </div>\r\n    )\r\n}\r\nexport default Post;","import React from 'react';\r\nimport {PostType} from '../../redux/profile-reducer';\r\nimport classes from './MyPosts.module.css';\r\nimport Post from \"./Post/Post\";\r\nimport {Field, Form} from \"react-final-form\";\r\nimport {composeValidators, maxLengthCreator, requiredField} from \"../../../utils/validators/Validator\";\r\nimport {Textarea} from \"../../Common/FormsControls/FormControls\";\r\n\r\n\r\nconst MyPosts = React.memo((props: MyPostsPropsType)=> {\r\n\r\n    let addPost = ({newPostText, ...restProps}: AddNewPostType) => {\r\n        props.addPost(newPostText);\r\n    }\r\n\r\n    let postsElements = props.postsData.map(el => <Post message={el.message} likes={el.likes}/>);\r\n    return (\r\n        <div className={classes.postBlock}>\r\n            <h3>My posts</h3>\r\n            <div>\r\n                <NewPostForm addPost={addPost} required={requiredField}/>\r\n                <div className={classes.posts}>\r\n                    {postsElements}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\nconst maxLength10 =  maxLengthCreator(10)\r\nconst NewPostForm = ({addPost,required, ...restProps}: NewPostFormType) => {\r\n    return (\r\n        <Form onSubmit={addPost}\r\n              render={({handleSubmit}) => (\r\n                  <form onSubmit={handleSubmit}>\r\n                      <div>\r\n                          <Field name=\"newPostText\"\r\n                                 component={Textarea}\r\n                                 placeholder=\"Enter your post\"\r\n                                 validate={composeValidators(required,maxLength10)}\r\n                          />\r\n                      </div>\r\n                      <button type=\"submit\">Submit</button>\r\n                  </form>\r\n              )}\r\n        />\r\n    )\r\n}\r\ntype NewPostFormType={\r\n    addPost:(values: AddNewPostType)=> void\r\n    required:(value: any)=> void\r\n}\r\ntype AddNewPostType = {\r\n    newPostText: string\r\n}\r\n\r\ntype MyPostsPropsType = {\r\n    postsData: Array<PostType>,\r\n    addPost:(newPost: string)=> void\r\n}\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport {addPostActionCreator} from \"../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        postsData: state.profilePage.postsData,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {\r\n             addPost : (newPostText: string) => {\r\n            dispatch(addPostActionCreator(newPostText));\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MyPosts)","import React from 'react';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType} from \"../redux/profile-reducer\";\r\n\r\ntype ProfileProps ={\r\n    profile: ProfileType\r\n    status: string\r\n    updateUserStatus: (status: string)=> void\r\n}\r\nconst Profile = (props: ProfileProps) => {\r\n\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile} status={props.status} updateUserStatus={props.updateUserStatus}/>\r\n            <MyPostsContainer />\r\n        </div>\r\n    )\r\n}\r\nexport default Profile;","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getUserProfile, getUserStatus, ProfileType, updateUserStatus} from \"../redux/profile-reducer\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport {Redirect, RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\ntype PropsType = RouteComponentProps<PathParamsType> & OwnPropsType\r\ntype MapStatePropsType = {\r\n    profile: ProfileType\r\n    status: string,\r\n    authorizedUserId: number | null\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchPropsType = {\r\n    getUserProfile: (userId: number) => void\r\n    getUserStatus: (userId: number) => void\r\n    updateUserStatus: (status: string) => void\r\n}\r\ntype OwnPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n    componentDidMount() {\r\n        let userId = +(this.props.match.params.userId);\r\n        if (!userId) {\r\n           // const userId='1455'\r\n           if(this.props.authorizedUserId) {\r\n               userId = this.props.authorizedUserId\r\n           } else{\r\n               return <Redirect to={'/login'}/>\r\n           }\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getUserStatus(userId)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateUserStatus={this.props.updateUserStatus}/>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.data.id,\r\n    isAuth: state.auth.data.isAuth\r\n\r\n});\r\nexport default compose<React.ComponentType>(connect(mapStateToProps, {getUserProfile,getUserStatus,updateUserStatus}),\r\n    withRouter,\r\n    withAuthRedirect)\r\n(ProfileContainer)\r\n"],"sourceRoot":""}