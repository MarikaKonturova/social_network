{"version":3,"sources":["components/Dialogs/DIalogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","components/Dialogs/Dialogs.module.css","components/hoc/withAuthRedirect.tsx"],"names":["DialogItem","props","path","id","className","classes","dialog","active","to","name","Message","message","maxLength100","maxLengthCreator","NewMessageForm","addNewMessage","required","onSubmit","render","handleSubmit","validate","composeValidators","component","Textarea","placeholder","type","Dialogs","dialogsElements","state","dialogs","map","el","messagesElements","messages","dialogsItems","newMessageBody","sendmessage","requiredField","compose","connect","messagesPage","dispatch","sendmessageActionCreator","withAuthRedirect","module","exports","mapStateToPropsForRedirect","isAuth","auth","data","Component","resProps"],"mappings":"4KAiBeA,EAbI,SAACC,GAChB,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OACI,qBAAKC,UAAWC,IAAQC,OAAS,IAAMD,IAAQE,OAA/C,SACI,cAAC,IAAD,CAASC,GAAIN,EAAb,SACKD,EAAMQ,UCERC,EAPC,SAACT,GACb,OACI,qBAAKG,UAAWC,IAAQM,QAAxB,SAAkCV,EAAMU,W,wBC0B1CC,EAAgBC,YAAiB,KACjCC,EAAiB,SAAC,GAAiE,IAAhEC,EAA+D,EAA/DA,cAAeC,EAAgD,EAAhDA,SAAgD,4CACpF,OACI,cAAC,IAAD,CAAMC,SAAUF,EACVG,OAAQ,gBAAEC,EAAF,EAAEA,aAAF,OACJ,uBAAMF,SAAUE,EAAhB,UACI,8BACI,cAAC,IAAD,CAAOV,KAAK,iBACLW,SAAUC,YAAkBL,EAASJ,GACrCU,UAAWC,IACXC,YAAY,yBAEvB,wBAAQC,KAAK,SAAb,2BAuBPC,EAzDC,SAACzB,GACb,IAAI0B,EAAkB1B,EAAM2B,MAAMC,QAAQC,KAAI,SAAAC,GAAE,OAAK,cAAC,EAAD,CAAY5B,GAAI4B,EAAG5B,GAAgBM,KAAMsB,EAAGtB,MAAhBsB,EAAG5B,OAChF6B,EAAmB/B,EAAM2B,MAAMK,SAASH,KAAI,SAAAnB,GAAO,OAAI,cAAC,EAAD,CAA0BA,QAASA,EAAQA,SAA7BA,EAAQR,OAQjF,OACI,sBAAKC,UAAWC,IAAQwB,QAAxB,UACI,qBAAKzB,UAAWC,IAAQ6B,aAAxB,SACKP,IAEL,qBAAKvB,UAAWC,IAAQ4B,SAAxB,SACI,oCAAOD,OAEX,cAAC,EAAD,CAAgBjB,cAbF,SAAC,GAAyC,IAAxCoB,EAAuC,EAAvCA,eACpBlC,EAAMmC,YAAYD,IAYgCnB,SAAUqB,U,wBCJrDC,4BACXC,aAhBoB,SAACX,GACrB,MAAO,CACHA,MAAOA,EAAMY,iBAKM,SAACC,GACxB,MAAO,CACHL,YAAa,SAACD,GACVM,EAASC,YAAyBP,SAO1CQ,IAFWL,CAEOZ,I,mBCzBtBkB,EAAOC,QAAU,CAAC,QAAU,yBAAyB,OAAS,wBAAwB,OAAS,wBAAwB,aAAe,8BAA8B,SAAW,0BAA0B,QAAU,2B,kHCM7MC,EAA6B,SAAClB,GAChC,MAAO,CACHmB,OAAQnB,EAAMoB,KAAKC,KAAKF,SAIzB,SAASJ,EAAoBO,GAQhC,OAAOX,YAAQO,EAARP,EANmB,SAACtC,GAA2C,IAAD,iBAChCA,GAAjBkD,GADiD,EAC5DJ,OAD4D,2BAEjE,OAAK9C,EAAM8C,OACJ,cAACG,EAAD,eAAeC,IADI,cAAC,IAAD,CAAU3C,GAAI","file":"static/js/4.363a5fe7.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport classes from './../Dialogs.module.css'\r\n\r\nconst DialogItem = (props: any) => {\r\n    let path = \"/dialogs/\" + props.id\r\n    return (\r\n        <div className={classes.dialog + ' ' + classes.active}>\r\n            <NavLink to={path}>\r\n                {props.name}\r\n            </NavLink>\r\n        </div>\r\n\r\n    )\r\n\r\n}\r\n\r\nexport default DialogItem;","import React from \"react\";\r\n\r\nimport classes from './../Dialogs.module.css';\r\n\r\nconst Message = (props: any) => {\r\n    return (\r\n        <div className={classes.message}>{props.message}</div>\r\n    )\r\n\r\n}\r\n\r\nexport default Message;","import React from \"react\";\r\nimport classes from './Dialogs.module.css'\r\nimport DialogItem from \"./DIalogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport {Field, Form} from \"react-final-form\";\r\nimport {Textarea} from \"../Common/FormsControls/FormControls\";\r\nimport {composeValidators, maxLengthCreator, requiredField} from \"../../utils/validators/Validator\";\r\n\r\n\r\nconst Dialogs = (props: messagesPage) => {\r\n    let dialogsElements = props.state.dialogs.map(el => (<DialogItem id={el.id} key={el.id} name={el.name}/>));\r\n    let messagesElements = props.state.messages.map(message => <Message key={message.id} message={message.message}/>);\r\n\r\n\r\n    const addNewMessage = ({newMessageBody}: AddNewMessageType) => {\r\n        props.sendmessage(newMessageBody);\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={classes.dialogs}>\r\n            <div className={classes.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={classes.messages}>\r\n                <div> {messagesElements}</div>\r\n            </div>\r\n            <NewMessageForm addNewMessage={addNewMessage} required={requiredField}/>\r\n        </div>\r\n    )\r\n}\r\nconst maxLength100 =  maxLengthCreator(100)\r\nconst NewMessageForm = ({addNewMessage, required, ...restProps}: NewMessageFormType) => {\r\n    return (\r\n        <Form onSubmit={addNewMessage}\r\n              render={({handleSubmit}) => (\r\n                  <form onSubmit={handleSubmit}>\r\n                      <div>\r\n                          <Field name=\"newMessageBody\"\r\n                                 validate={composeValidators(required,maxLength100)}\r\n                                 component={Textarea}\r\n                                 placeholder=\"Enter your message\"/>\r\n                      </div>\r\n                      <button type=\"submit\">Submit</button>\r\n                  </form>\r\n              )}\r\n        />\r\n    )\r\n}\r\n\r\n//types\r\n\r\ntype messagesPage = {\r\n    state: AppStateType[\"messagesPage\"]\r\n    sendmessage: (newMessageBody: string) => void\r\n    isAuth: boolean\r\n}\r\ntype AddNewMessageType = {\r\n    newMessageBody: string\r\n\r\n}\r\ntype NewMessageFormType = {\r\n    addNewMessage: (values: AddNewMessageType) => void\r\n    required:(value: any)=> void\r\n\r\n}\r\nexport default Dialogs;","import React from \"react\";\r\nimport {sendmessageActionCreator} from \"../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport {withAuthRedirect} from \"../hoc/withAuthRedirect\";\r\nimport {compose, Dispatch} from \"redux\";\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        state: state.messagesPage\r\n    }\r\n}\r\n\r\n\r\nconst mapDispatchtoProps = (dispatch: Dispatch) => {\r\n    return {\r\n        sendmessage: (newMessageBody: string) => {\r\n            dispatch(sendmessageActionCreator(newMessageBody));\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchtoProps),\r\n    withAuthRedirect)(Dialogs)\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2sQEs\",\"dialog\":\"Dialogs_dialog__203-Q\",\"active\":\"Dialogs_active__1pcFk\",\"dialogsItems\":\"Dialogs_dialogsItems__PT4-G\",\"messages\":\"Dialogs_messages__27JYH\",\"message\":\"Dialogs_message__21fPF\"};","import {Redirect} from \"react-router-dom\";\r\nimport React, {Component, ComponentType} from \"react\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\ntype mapStateToPropsForRedirectType ={\r\n    isAuth: boolean\r\n}\r\nconst mapStateToPropsForRedirect = (state: AppStateType): mapStateToPropsForRedirectType => {\r\n    return {\r\n        isAuth: state.auth.data.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>){\r\n\r\n    const RedirectComponent = (props: mapStateToPropsForRedirectType) => {\r\n        let {isAuth, ...resProps } = {...props}\r\n        if (!props.isAuth) return <Redirect to={\"/login\"}/>\r\n        return <Component {...resProps as T}/>\r\n    }\r\n\r\n    return connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n}"],"sourceRoot":""}